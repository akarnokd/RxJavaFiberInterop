plugins {
    id("java-library")
    id("checkstyle")
    id("eclipse")
    id("jacoco")
    id("maven-publish")
    id("ru.vyarus.animalsniffer") version "1.7.1"
    id("me.champeau.gradle.jmh") version "0.5.3"
    id("com.github.hierynomus.license") version "0.16.1"
    id("biz.aQute.bnd.builder") version "6.4.0"
    id("com.vanniktech.maven.publish") version "0.26.0"
    // id("org.beryx.jar") version "2.0.0"
}

jacoco {
    toolVersion = "0.8.8"
}

build.dependsOn jacocoTestReport

checkstyle {
    configFile = project.file("config/checkstyle/checkstyle.xml")
    configProperties = [
            "checkstyle.suppressions.file": project.file("config/checkstyle/suppressions.xml"),
            "checkstyle.header.file"      : project.file("config/license/HEADER_JAVA")
    ]
}

check.dependsOn jacocoTestReport

group = "com.github.akarnokd"

// Eclipse Buildship doesn't support higher targets when importing
def targetVer = 19

if (project.hasProperty("targetVer")) {
   targetVer = project.targetVer;
   logger.lifecycle("Overriding Target Version: " + project.targetVer)
}

sourceCompatibility = targetVer
targetCompatibility = targetVer

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.reactivex.rxjava3:rxjava:3.1.8"
    testImplementation "org.reactivestreams:reactive-streams-tck:1.0.4"
    testImplementation "org.testng:testng:7.6.0"
    testImplementation "com.beust:jcommander:1.82"
}

compileJava.options.fork = true
compileTestJava.options.fork = true

def loomDir = System.getenv("LOOM_JDK")
if (System.getenv("CI") != null) {
    println("Overriding JDK on CI");
    compileJava.options.forkOptions.executable = project.file(".").absolutePath + "/" + loomDir + "/bin/javac"
    javadoc.executable = project.file(".").absolutePath + "/" + loomDir + "/bin/javadoc"
    test.executable = project.file(".").absolutePath + "/" + loomDir + "/bin/java"
    println(test.executable)
} else {
    println("Overriding JDK on local machine");
    if (loomDir == null || "".equals(loomDir)) {
        loomDir = "jdk-14-loom"
    }
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        println "it's Windows"
        compileJava.options.forkOptions.executable = "c:/work/" + loomDir + "/bin/javac.exe"
        javadoc.executable = "c:/work/" + loomDir + "/bin/javadoc.exe"
        test.executable = "c:/work/" + loomDir + "/bin/java.exe"
    } else {
        println "it's Linux probably"
        def uname = System.properties['user.home']
        compileJava.options.forkOptions.executable = uname + "/" + loomDir + "/bin/javac"
        javadoc.executable = uname + "/" + loomDir + "/bin/javadoc"
        test.executable = uname + "/" + loomDir + "/bin/java"
    }
}
compileTestJava.options.forkOptions.executable = compileJava.options.forkOptions.executable
def testExecutable = test.executable

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
    // options.compilerArgs << "--enable-preview"
}

/*
moduleConfig {
    moduleInfoPath = 'src/main/module/module-info.java'
    multiReleaseVersion = 21
    version = project.version
}
*/

jar {
    from('.') {
        include 'LICENSE'
        include 'COPYRIGHT'
        into('META-INF/')
    }

    // Cover for bnd still not supporting MR Jars: https://github.com/bndtools/bnd/issues/2227
    bnd('-fixupmessages': '^Classes found in the wrong directory: \\\\{META-INF/versions/9/module-info\\\\.class=module-info}$')
    bnd (
            'Bundle-Name': 'rxjava-fiber-interop',
            'Bundle-Vendor': 'akarnokd',
            'Bundle-Description': 'Library to interoperate between RxJava 3 and Fibers',
            'Import-Package': '!org.junit,!junit.framework,!org.mockito.*,!org.testng.*,*',
            'Bundle-DocURL': 'https://github.com/akarnokd/RxJavaFiberInterop',
            "Bundle-SymbolicName": "hu.akarnokd.rxjava3.fibers",
            "Export-Package": "hu.akarnokd.rxjava3.fibers.*",
            "Multi-Release": "true"
    )
}

test {
    useTestNG()
     executable = testExecutable
     jvmArgs "--enable-preview"
     jacoco.includes = ["**akarnokd**"]
     testLogging  {
        events=["skipped", "failed", "standard_error"]
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"
        
        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
     }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}


jacocoTestReport.dependsOn test

license {
    header rootProject.file('HEADER')
    skipExistingHeaders true
    ignoreFailures true
    excludes(["**/*.md", "**/*.txt"])
}
