version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.3.0"
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.15.0'
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
    }
}

apply plugin: 'java'

apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.5"
}

build.dependsOn jacocoTestReport

check.dependsOn jacocoTestReport


// Unfortunately, Gradle doesn't support running with JDK 13+ and Loom is a JDK 14 preview

group = "com.github.akarnokd"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://oss.jfrog.org/libs-snapshot' }
}

dependencies {
    implementation "io.reactivex.rxjava3:rxjava:3.0.12"
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.reactivestreams:reactive-streams-tck:1.0.3"
    testImplementation "org.testng:testng:7.4.0"
    testImplementation "com.beust:jcommander:1.81"
}

compileJava.options.fork = true
compileTestJava.options.fork = true

def loomDir = System.getenv("LOOM_JDK")
if (System.getenv("CI") != null) {
    println("Overriding JDK on CI");
    compileJava.options.forkOptions.executable = "./" + loomDir + "/bin/javac"
    javadoc.executable = "./" +loomDir + "/bin/javadoc"
    test.executable = project.file(".").absolutePath + "/" + loomDir + "/bin/java"
    println(test.executable)
} else {
    println("Overriding JDK on local machine");
    if (loomDir == null || "".equals(loomDir)) {
        loomDir = "jdk-14-loom"
    }
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        println "it's Windows"
        compileJava.options.forkOptions.executable = "c:/work/" + loomDir + "/bin/javac.exe"
        javadoc.executable = "c:/work/" + loomDir + "/bin/javadoc.exe"
        test.executable = "c:/work/" + loomDir + "/bin/java.exe"
    } else {
        println "it's Linux probably"
        def uname = System.properties['user.home']
        compileJava.options.forkOptions.executable = uname + "/" + loomDir + "/bin/javac"
        javadoc.executable = uname + "/" + loomDir + "/bin/javadoc"
        test.executable = uname + "/" + loomDir + "/bin/java"
    }
}
compileTestJava.options.forkOptions.executable = compileJava.options.forkOptions.executable
def testExecutable = test.executable

apply plugin: 'maven'

apply plugin: 'biz.aQute.bnd.builder'

jar {
    bnd ('Bundle-Name': 'rxjava-fiber-interop',
            'Bundle-Vendor': 'akarnokd',
            'Bundle-Description': 'Library to interoperate between RxJava 3 and Fibers',
            'Import-Package': '!org.junit,!junit.framework,!org.mockito.*,*',
            'Bundle-DocURL': 'https://github.com/akarnokd/RxJavaFiberInterop')
}

apply plugin: "com.vanniktech.maven.publish"

test {
    maxHeapSize = "1g"
    testLogging  {
        events "started", "failed", "standard_error" // "skipped", "passed"
        exceptionFormat="full"
        //    showStandardStreams = true
    }
    jacoco.includes = ["**akarnokd**"]
}

task testng(type: Test) { 
     useTestNG()
     executable = testExecutable
     jacoco.includes = ["**akarnokd**"]
     testLogging  {
        events=["skipped", "failed", "standard_error"]
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"
        
        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
     }
} 


jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    executionData testng
}

check.dependsOn testng

jacocoTestReport.dependsOn test
jacocoTestReport.dependsOn testng

apply plugin: "com.github.hierynomus.license"

license {
    header rootProject.file('HEADER')
    skipExistingHeaders true
    ignoreFailures true
    excludes(["**/*.md", "**/*.txt"])
}
